package chris.spring.web.board;

import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import chris.spring.web.board.impl.BoardDAO;

@Controller
public class BoardController {

	@RequestMapping(value="/insertBoard.do")
	public String insertBoard(BoardVO vo, BoardDAO boardDao) {
		System.out.println("글 등록 처리");
		//1. 사용자 입력 정보 추출 : 커맨드 객체가 자동으로 처리해 줌.
		//2. 데이터베이스 연동처리
		//boardDAO객체도 VO와 동일하게 커맨드 객체를 사용해서 자동으로 매핑한다.
		boardDao.insertBoard(vo);
		return "getBoardList.do";//비즈니스 로직 종료후에 View경로를 리턴한다.
	}
	
	@RequestMapping("/updateBoard.do")
	public String updateBoard(BoardVO vo, BoardDAO boardDao) {
		System.out.println("글 수정 처리");
		// 1. 사용자 입력 정보 추출
		// 2. 데이터베이스 연동 처리
		// 1번과 2번은 Command객체의 성질을 이용하여 해당 객체 안의 setter,메서드들의
		// 기능을 사용해서 자동으로 처리가 된다.
		boardDao.updateBoard(vo);
		
		//proc와 view가 같이 있는경우 do요청을 보내어 이동한다.
		return "getBoardList.do";
	}
	
	@RequestMapping("/deleteBoard.do")
	public String deleteBoard(BoardVO vo, BoardDAO boardDao) {
		System.out.println("글 삭제 처리");

		boardDao.deleteBoard(vo);

		//삭제 처리후 페이지 이동을 해야하는데 삭제하고 남은 글들을 받아서 
		//목록을 보여주어야 하기 때문에 String으로 do요청을 보낸다.
		return "getBoardList.do";
	}
	
	@RequestMapping("/getBoard.do")
	//해당 메서드의 결과는 글의 상세페이지를 보여주어야 하기 때문에 ModelAndView를 리턴타입으로 지정한다.
	public String getBoard(BoardVO vo, BoardDAO boardDao, Model model) {
		System.out.println("글 상세 보기 처리");
		
		//BoardVO, BoardDAO, ModelAndView객체는 Command객체로서 
		//그 값들이 자동으로 저장이 된다.
		
		BoardVO board = boardDao.getBoard(vo);
		
		mav.addObject("board",board);
		mav.setViewName("getBoard.jsp");
		
		return mav;
	}
	
	@RequestMapping("/getBoardList.do")
	public ModelAndView getBoardList(BoardVO vo, BoardDAO boardDao, ModelAndView mav) {
		System.out.println("글 목록 검색 처리");
		//SpringContainer가 지원하는 Command객체를 사용하여 불필요한 코드를 줄인다.
		//(BoardVO, BoardDAO, ModelAndView가 해당)
		List<BoardVO> boardList = boardDao.getBoardList(vo);
		
		//페이지를 보여주기 위해서는 ViewResolver를 사용해 보낼수 있도록
		//ModelAndView객체를 사용한다.
		mav.addObject("boardList",boardList);
		mav.setViewName("getBoardList.jsp");

		return mav;
	}
	
}
