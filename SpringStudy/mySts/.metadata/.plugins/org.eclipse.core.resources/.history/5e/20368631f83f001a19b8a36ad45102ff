<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
<context:component-scan base-package="chris.spring.web"></context:component-scan>
<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
<!-- <bean id = "log" class = "chris.spring.web.common.LogAdvice"></bean>
<bean id = "log4j" class = "chris.spring.web.common.Log4jAdvice"></bean>
<bean id = "before" class = "chris.spring.web.common.BeforeAdvice"></bean>
<bean id = "afterReturning" class = "chris.spring.web.common.AfterReturningAdvice"></bean>
<bean id = "afterThrowing" class = "chris.spring.web.common.AfterThrowingAdvice"></bean>	
<bean id = "after" class = "chris.spring.web.common.AfterAdvice"></bean>
<bean id = "around" class = "chris.spring.web.common.AroundAdvice"></bean>	
	<aop:config>
		<aop:pointcut expression="execution(* chris.spring.web..*Impl.*(..))" id = "allPointcut"/>
		<aop:pointcut expression="execution(* chris.spring.web..*Impl.get*(..))" id = "getPointcut"/>
		<aop:aspect ref = "afterReturning">
			<aop:after-returning method="afterLog" pointcut-ref="getPointcut" returning = "returnObj"/>
		</aop:aspect>
		<aop:aspect ref = "before">
			<aop:before method="beforeLog" pointcut-ref = "getPointcut"/>
		</aop:aspect>
		<aop:aspect ref = "around">
			<aop:around method = "aroundLog" pointcut-ref = "getPointcut"/>
		</aop:aspect>
		<aop:aspect ref = "afterThrowing">
			<aop:after-throwing method = "exceptionLog" pointcut-ref="allPointcut" throwing = "e"/>
		</aop:aspect>		
		<aop:aspect ref = "after">
			<aop:after method = "finallyLog" pointcut-ref="allPointcut"/>
		</aop:aspect>
	</aop:config> -->
<!-- <bean id = "userService" class = "chris.spring.web.user.impl.UserServiceImpl">
	<property name = "userDAO" ref = "userDAO"/>
</bean>
<bean id = "userDAO" class = "chris.spring.web.user.impl.UserDAO"/>
<bean id = "tv" class="chris.spring.polymorphism.SamsungTV" lazy-init = "true">
		<constructor-arg ref = "apple"></constructor-arg>
		<constructor-arg value = "2800000"></constructor-arg>
	</bean>
	<bean id = "tv1" class = "chris.spring.polymorphism.LgTV" p:price = "2800000" p:speaker-ref="apple" lazy-init = "true"/>
	<bean id = "sony" class = "chris.spring.polymorphism.SonySpeaker" lazy-init = "true"></bean>
	<bean id = "apple" class = "chris.spring.polymorphism.AppleSpeaker" lazy-init = "true"></bean> -->
<!-- 
	<bean id = "dataSource" class = "org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value = "oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value = "jdbc:oracle:thin:@localhost:1521/XEPDB1"/>
		<property name = "username" value = "red"/>
		<property name = "password" value = "red"/>
	</bean>
 -->
 	<context:property-placeholder location="classpath:config/database.properties"/>
	<bean id = "dataSource" class = "org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value = "${jdbc.driver}"/>
		<property name="url" value = "${jdbc.url}"/>
		<property name = "username" value = "${jdbc.username}"/>
		<property name = "password" value = "${jdbc.password}"/>
	</bean>
	
	<bean id = "jdbcTemplate" class = "org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref = "dataSource"/>
	</bean>
	
	<bean id = "transactionManager" class = "org.springframework.jdbc.datasourse.DataSourseTransactionManager">
		<property name = "dataSource" ref = "dataSource"></property>
	</bean>

</beans>
