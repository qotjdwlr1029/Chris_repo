package chris.spring.web.board;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;

import chris.spring.web.board.impl.BoardDAO;

@Controller
public class BoardController {

	//@ModelAttribute는 파라미터 앞에 붙이면 해당 Command객체의 이름을 변경할 때 사용하는 것이고,
	//View(JSP)에서 사용할 데이터를 설정하는 용도로 사용할수 있다.
	
	@ModelAttribute("conditionMap")
	public Map<String, String> searchConditionMap(){
		Map<String, String> conditionMap = new HashMap<String, String>();
		conditionMap.put("제목", "TITLE");
		conditionMap.put("내용", "CONTENT");
		return conditionMap;
	}
	
	@RequestMapping(value="/insertBoard.do")
	public String insertBoard(BoardVO vo, BoardDAO boardDao) {
		System.out.println("글 등록 처리");
		//1. 사용자 입력 정보 추출 : 커맨드 객체가 자동으로 처리해 줌.
		//2. 데이터베이스 연동처리
		//boardDAO객체도 VO와 동일하게 커맨드 객체를 사용해서 자동으로 매핑한다.
		boardDao.insertBoard(vo);
		return "getBoardList.do";//비즈니스 로직 종료후에 View경로를 리턴한다.
	}
	
	@RequestMapping("/updateBoard.do")
	public String updateBoard(BoardVO vo, BoardDAO boardDao) {
		System.out.println("글 수정 처리");
		// 1. 사용자 입력 정보 추출
		// 2. 데이터베이스 연동 처리
		// 1번과 2번은 Command객체의 성질을 이용하여 해당 객체 안의 setter,메서드들의
		// 기능을 사용해서 자동으로 처리가 된다.
		boardDao.updateBoard(vo);
		
		//proc와 view가 같이 있는경우 do요청을 보내어 이동한다.
		return "getBoardList.do";
	}
	
	@RequestMapping("/deleteBoard.do")
	public String deleteBoard(BoardVO vo, BoardDAO boardDao) {
		System.out.println("글 삭제 처리");

		boardDao.deleteBoard(vo);

		//삭제 처리후 페이지 이동을 해야하는데 삭제하고 남은 글들을 받아서 
		//목록을 보여주어야 하기 때문에 String으로 do요청을 보낸다.
		return "getBoardList.do";
	}
	
	@RequestMapping("/getBoard.do")
	//해당 메서드의 결과는 글의 상세페이지를 보여주어야 하기 때문에 ModelAndView를 리턴타입으로 지정한다.
	public String getBoard(BoardVO vo, BoardDAO boardDao, Model model) {
		System.out.println("글 상세 보기 처리");
		
		//BoardVO, BoardDAO, ModelAndView객체는 Command객체로서 
		//그 값들이 자동으로 저장이 된다.
		
		BoardVO board = boardDao.getBoard(vo);
		
		model.addAttribute("board",board);
		return "getBoard.jsp";
	}
	
	@RequestMapping("/getBoardList.do")
	public String getBoardList(BoardVO vo, BoardDAO boardDao, Model model
		/*@RequestParam(value="searchCondition",defaultValue="TITLE",required=false) String condition,
		@RequestParam(value="searchKeyword",defaultValue="",required=false) String keyword*/) {
		//Command객체에 없는 파라미터를 전달받고자 할때 @RequestMapping 어노테이션을 사용한다.
		//만일 받고자 하는 파라미터가 String이 아닐경우 선언한 실제 타입으로 알아서 받게된다.(자동변환)
		//@RequestParam이 적용된 파라미터는 기본적으로 필수 파라미터이다.
		//하지만 필수가 아닌 경우에는 required속성을 적고 false로 설정하면 된다.
		//필수가 아닌 경우에서 값을 받게되면 null값을 받게 된다 이때, null값을 할당할 수 없는 기본데이터의
		//경우에는 에러가 발생한다. 따라서 defaultValue속성을 사용하여 기본값을 지정해준다.
		System.out.println("글 목록 검색 처리");
		System.out.println("검색 조건 : " + vo.getSearchCondition());
		System.out.println("검색 단어 : " + vo.getSearchKeyword());
		//SpringContainer가 지원하는 Command객체를 사용하여 불필요한 코드를 줄인다.
		//(BoardVO, BoardDAO, ModelAndView가 해당)
		List<BoardVO> boardList = boardDao.getBoardList(vo);
		
		//페이지를 보여주기 위해서는 ViewResolver를 사용해 보낼수 있도록
		//ModelAndView객체를 사용한다.
		model.addAttribute("boardList",boardList);

		return "getBoardList.jsp";
	}
	
}
